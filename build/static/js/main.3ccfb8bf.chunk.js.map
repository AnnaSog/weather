{"version":3,"sources":["components/form/Form.js","services/WeatherService.js","components/weather/Weather.js","components/info/Info.js","components/app/App.js","index.js"],"names":["Form","weatherMethod","error","onSubmit","type","name","required","placeholder","className","WeatherService","getWeather","useCallback","city","a","urlWeather","fetch","res","ok","Error","status","json","data","_transformWeather","country","sys","temp","Math","round","main","feelsLike","feels_like","pressure","humidity","wind","speed","icon","weather","description","Weather","Info","date","Date","getTime","month","getMonth","day","getDate","year","getFullYear","hours","getHours","min","getMinutes","App","useState","setCity","setWeather","setError","clearError","e","preventDefault","target","elements","value","then","catch","err","message","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3ccfb8bf.chunk.js","sourcesContent":["\r\nimport './form.css';\r\n\r\nconst Form = ({weatherMethod, error}) => {\r\n\r\n    return(\r\n        <div>\r\n            <form onSubmit={weatherMethod}>\r\n                <input type=\"text\" name='city' required placeholder=\"Search city\"/>\r\n                <button>Search</button>\r\n            </form>\r\n            {error ? <p className='error'>Enter the correct city or remove the space at the end</p> : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form;","import { useCallback } from \"react\";\r\n\r\nconst  WeatherService = () =>  {\r\n\r\n    const getWeather = useCallback(async (city) => {\r\n        const urlWeather = `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=e897d3d88e95bb05e8d05bbc09c2c794`\r\n        const res = await fetch(urlWeather)\r\n\r\n        if (!res.ok) {\r\n            throw new Error(`Could not fetch ${urlWeather}, status: ${res.status}`);\r\n        }\r\n\r\n        const data = await res.json();  //получим данные в формате json\r\n        return _transformWeather(data);\r\n        \r\n    }, []); \r\n\r\n    const _transformWeather = (data) => {\r\n        return {\r\n            city: data.name + ',',\r\n            country: data.sys.country,\r\n            temp: Math.round(data.main.temp) + \"°C\",\r\n            feelsLike: \"Feels like: \" + Math.round(data.main.feels_like) + \"°C\",\r\n            pressure: \"Pressure: \" + data.main.pressure + ' hPa',\r\n            humidity: \"Humidity: \" + data.main.humidity + ' %',\r\n            wind: 'Wind: ' + data.wind.speed + \" m/s\",\r\n            icon:data.weather[0].main +',' ,\r\n            description: data.weather[0].description\r\n        }\r\n    }\r\n\r\n    return{getWeather}\r\n}\r\n\r\nexport default WeatherService;","import './weather.css'\r\n\r\nconst Weather = ({city, weather}) => {\r\n\r\n    const {temp, feelsLike, pressure, country, humidity, wind, icon, description} = weather;\r\n\r\n\r\n    return(\r\n        <div className='weather'>\r\n            {city ? \r\n                <div >\r\n                    <p> {city} {country} </p>\r\n                    <p className='temp'> {temp} </p>\r\n                    <p>{icon} {description}  </p>\r\n                    <p> {feelsLike}</p>\r\n                    <p>{pressure}</p>\r\n                    <p> {humidity} </p>\r\n                    <p> {wind} </p>\r\n                </div>\r\n             : null\r\n            } \r\n        </div>\r\n    )  \r\n}\r\n\r\nexport default Weather;","import './info.css';\r\n\r\nconst Info = () => {\r\n\r\n    let date = new Date();\r\n    date.getTime();\r\n    let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\r\n    let month =  months[date.getMonth()]; \r\n    let day = date.getDate()\r\n    let year = date.getFullYear();\r\n    let hours = date.getHours();\r\n    let min = date.getMinutes();\r\n\r\n    return(\r\n        <div className='info'>\r\n            <h1>Weather forecast</h1>\r\n            <h5> {day} {month} {year}</h5>\r\n\r\n            { `${min}` < 10  ? \r\n              <h5> {hours}:{`0${min}`}  </h5>\r\n             : <h5> {hours}:{min}</h5>\r\n            }\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Info;","import { useState, useCallback} from \"react\";\n\nimport Form from '../form/Form';\nimport WeatherService from '../../services/WeatherService';\nimport Weather from '../weather/Weather';\nimport Info from '../info/Info';\n\nimport './App.css';\n\nfunction App() {\n\n  const [city, setCity] = useState(null);\n  const [weather, setWeather] = useState({});\n  const [error, setError] = useState(null);\n\n  const {getWeather} = WeatherService();\n\n  const updateCity = (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n     \n    if(city) {      //если город внесен, то заработают все действия \n\n      clearError();\n      getWeather(city)\n        .then(res =>{\n            setCity(res.city)\n            setWeather(res)\n            // console.log(res)\n          })\n        .catch((err) => {\n          setError(err.message)\n          setWeather(err.message)\n          setCity('')\n        })\n    }\n  } \n  \n  //фун-ия по очистке ошибок, по умолчанию она не будет очищаться\n  const clearError = useCallback( ()=> {\n    setError(null)              //сообщение об ошибке исчезнет\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"main\">\n        <div className=\"info\" >\n            <Info/>\n        </div>\n        <div className=\"formInfo\">\n          <Form weatherMethod={updateCity}\n            error={error}/>\n          <Weather \n            city={city}\n            weather={weather}\n          />\n        </div>\n      </div>     \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { StrictMode } from 'react';\nimport './index.css';\nimport App from './components/app/App';\nimport WeatherService from './services/WeatherService'\n\n\n// const weatherService = new WeatherService();\n\n// weatherService.getWeather()\n//   .then(res => console.log(res))\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n    \n  </StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}